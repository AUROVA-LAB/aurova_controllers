lambda_1: [ 0.85, 0.3,1.0, 1.0, 1.0, 1.0] #6 gain of visual servoing frontal camera
#lambda_1: [ 0.2, 0.05,1.0, 1.0, 1.0, 1.0] #6 gain of visual servoing frontal camera

lambda_2: [ 0.85, 1.05, 1.0, 1.0, 1.0, 1.0] #6 gain of visual servoing rear camera
lambda_c: [0.25,0.0025    ,0.25,0.0025     ,0.25,0.0025     ,0.5,0.0025] #2 gain(lineal,steering) of kinematics control(status 1,2,3,4) 0.2,0.0025    ,0.25,0.0025     ,0.25,0.0025     ,0.5,0.0025

#lambda_c: [0.2,0.0025    ,0.25,0.0025     ,0.25,0.0025     ,0.5,0.0025] #2 gain(lineal,steering) of kinematics
#lambda_c: [0.0,0.0    ,0.0,0.00,0.0,0.0     ,0.0,0.000]

k_tanh1: [2.0, 1.0] #Hyperbolic gain lineal and angular velocity (frontal)
k_tanh2: [1.0, 2.0] #Hyperbolic gain lineal and angular velocity (rear)
err_X: [-0.01, -0.70, -0.7, -0.001,
         0.01,  0.70,  0.7,  0.001]
err_Y: [-0.01, -0.70, -0.7, -0.001,
         0.01,  0.70,  0.7,  0.001]
X_desi_estado : [3.3 ,0.0 ,0.0 ,-0.60] # puntos deseados en X para el control cinematico en cada uno de los estados
Y_desi_estado : [0.0 ,-4.0 ,-4.0 ,0.0] # puntos deseados en Y para el control cinematico en cada uno de los estados

oxy_1: [650.0, 450.0] #Desired center in pixels (frontal Image)
oxy_2: [650.0, 550.0] #Desired center in pixels (rear Image)

select_cam: [0.0] #Select control (only in experiments) 0->frontal 1->rear

camera1_matrix: [915.828857, 0.000000  ,644.015094  ,0.000000,
                 0.000000  ,925.069885 , 372.912666 ,0.000000, 
                 0.000000  ,0.000000   ,1.000000    ,0.000000]

camera1_640_480: [613.915710 ,0.000000   ,319.563182 ,0.000000,
                  0.000000   ,615.786133 ,247.006065 ,0.000000,
                  0.000000   ,0.000000   ,1.000000   ,0.000000]


camera2_matrix: [992.154663 ,0.000000   ,638.950968 ,0.000000,
                 0.000000   ,996.800293 ,330.947785 ,0.000000,
                 0.000000   ,0.000000   ,1.000000   ,0.000000]


#tlc_1: [-0.0149389263, -0.059792, -0.11993134]
#tlc_1: [-0.11993134, -0.059792, -0.0149389263] ## usar para viki-yolo
tlc_1: [ 0.025, -0.059792, -0.11993134]

## 
### Rotation matrix Lidar->frontal camera
rlc_1:  [0.999715  ,-0.00610437 ,0.023068,  
         0.0113064 , 0.972496   ,-0.232646,  
        -0.0210134 , 0.23284    ,0.972288 ]

### Traslation matrix Lidar->rear camera
tlc_2: [0.06, -0.04, -0.16]

#tlc_2: [1.0, 1.0, 1.0]

#rlc_2:  [-0.9997339, -0.0000000,  0.0230680,
#         -0.0091823, -0.9173623, -0.3979473,
#         0.0211617, -0.3980533,  0.9171182 ]


rlc_2: [0.0000000,  1.0000000,  0.0000000,
        0.3907311, -0.0000000, -0.9205049,
       -0.9205049,  0.0000000, -0.3907311]

#rlc_2:  [-0.9997346,  0.0230363,  0.0000000,
#          0.0211337,  0.9171643,  0.3979486,
#          0.0091673,  0.3978430, -0.9174077 ]



#rlc_2:  [1.0,  0.0,  0.0000000,
 #  0.0,  1.0, 0.0,
  #-0.0, -0.0, 1.0]


tcb_1 : [ 0.670259, 0.0608938,  0.648381]
#rcb_1 : [-0.0099 ,-0.2325 ,0.9725    
#        ,-0.9999 ,0.0061  ,-0.0087    
#        ,-0.0039 ,-0.9726 ,-0.2326]
rcb_1: [-0.0113064 ,-0.0210134 ,-0.999716
       ,-0.972496  , 0.232841  , 0.0061044
       , 0.232645  , 0.972288  ,-0.023068]


tcb_2 : [-0.131652 ,-0.06 ,0.0993372]
rcb_2:  [0.0 ,0.390731  ,-0.920505
        ,1.0 ,0.0       , 0.0
        ,0.0 ,-0.920505 ,-0.390731]



### Transformation matrix robot_base->LiDAR
bTv: [ 1.0 ,0.0 ,0.0 ,0.550,
       0.0 ,1.0 ,0.0 ,0.0  ,
       0.0 ,0.0 ,1.0 ,0.645,
       0.0 ,0.0 ,0.0 ,1.0 ]



spxd : [597.0, 427.0, 703.0, 427.0, 597.0, 472.0, 703.0, 472.0] #### Solo para comparar con el otro metodo 


# metodo_data
metodo_data : [0.0] ### 0 es Viki_Yolo, 1 es MGBO- YOLO

bb_perce : [0.4] ## porcentaje de reduccion del bounding box













